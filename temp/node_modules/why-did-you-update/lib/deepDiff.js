'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodashIsEqual = require('lodash/isEqual');

var _lodashIsEqual2 = _interopRequireDefault(_lodashIsEqual);

var _lodashIsFunction = require('lodash/isFunction');

var _lodashIsFunction2 = _interopRequireDefault(_lodashIsFunction);

var _lodashIsObject = require('lodash/isObject');

var _lodashIsObject2 = _interopRequireDefault(_lodashIsObject);

var _lodashKeys = require('lodash/keys');

var _lodashKeys2 = _interopRequireDefault(_lodashKeys);

var _lodashUnion = require('lodash/union');

var _lodashUnion2 = _interopRequireDefault(_lodashUnion);

var isReferenceEntity = function isReferenceEntity(o) {
  return Array.isArray(o) || (0, _lodashIsObject2['default'])(o);
};

var deepDiff = function deepDiff(prev, next, name) {
  var notify = function notify(status, bold) {
    console.group(name);

    if (bold) {
      console.warn('%c%s', 'font-weight: bold', status);
    } else {
      console.warn(status);
    }

    console.log('%cbefore', 'font-weight: bold', prev);
    console.log('%cafter ', 'font-weight: bold', next);
    console.groupEnd();
  };

  var isRefEntity = isReferenceEntity(prev) && isReferenceEntity(next);

  if (!(0, _lodashIsEqual2['default'])(prev, next)) {
    var isFunc = (0, _lodashIsFunction2['default'])(prev) && (0, _lodashIsFunction2['default'])(next);

    if (isFunc) {
      if (prev.name === next.name) {
        notify('Value is a function. Possibly avoidable re-render?', false);
      }
    } else if (isRefEntity) {
      var keys = (0, _lodashUnion2['default'])((0, _lodashKeys2['default'])(prev), (0, _lodashKeys2['default'])(next));
      keys.forEach(function (key) {
        return deepDiff(prev[key], next[key], name + '.' + key);
      });
    }
  } else if (prev !== next) {
    notify('Value did not change. Avoidable re-render!', true);

    if (isRefEntity) {
      var keys = (0, _lodashUnion2['default'])((0, _lodashKeys2['default'])(prev), (0, _lodashKeys2['default'])(next));
      keys.forEach(function (key) {
        return deepDiff(prev[key], next[key], name + '.' + key);
      });
    }
  }
};
exports.deepDiff = deepDiff;