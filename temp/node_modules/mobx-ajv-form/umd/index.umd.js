(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("_"), require("Ajv"), require("mobx"));
	else if(typeof define === 'function' && define.amd)
		define(["_", "Ajv", "mobx"], factory);
	else if(typeof exports === 'object')
		exports["ReactiveForm"] = factory(require("_"), require("Ajv"), require("mobx"));
	else
		root["ReactiveForm"] = factory(root["_"], root["Ajv"], root["mobx"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(module, exports, require('./form'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod, mod.exports, global.form);
	    global.index = mod.exports;
	  }
	})(this, function (module, exports) {
	  (function (global, factory) {
	    if (true) {
	      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	      factory(module, exports);
	    } else {
	      var mod = {
	        exports: {}
	      };
	      factory(mod, mod.exports, global.form);
	      global.index = mod.exports;
	    }
	  })(this, function (module, exports, _form) {
	    'use strict';

	    Object.defineProperty(exports, "__esModule", {
	      value: true
	    });

	    var _form2 = _interopRequireDefault(_form);

	    function _interopRequireDefault(obj) {
	      return obj && obj.__esModule ? obj : {
	        default: obj
	      };
	    }

	    exports.default = _form2.default;
	    module.exports = exports['default'];
	  });
	});

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(5), __webpack_require__(4), __webpack_require__(3), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(module, exports, require('mobx'), require('./form.field'), require('ajv'), require('lodash'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod, mod.exports, global.mobx, global.form, global.ajv, global.lodash);
	    global.form = mod.exports;
	  }
	})(this, function (module, exports) {
	  (function (global, factory) {
	    if (true) {
	      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(5), __webpack_require__(4), __webpack_require__(3), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	      factory(module, exports);
	    } else {
	      var mod = {
	        exports: {}
	      };
	      factory(mod, mod.exports, global.mobx, global.form, global.ajv, global.lodash);
	      global.form = mod.exports;
	    }
	  })(this, function (module, exports, _mobx, _form, _ajv, _lodash) {
	    'use strict';
	
	    Object.defineProperty(exports, "__esModule", {
	      value: true
	    });
	    exports.default = undefined;
	
	    var _form2 = _interopRequireDefault(_form);
	
	    var _ajv2 = _interopRequireDefault(_ajv);
	
	    var _lodash2 = _interopRequireDefault(_lodash);
	
	    function _interopRequireDefault(obj) {
	      return obj && obj.__esModule ? obj : {
	        default: obj
	      };
	    }
	
	    function _defineProperty(obj, key, value) {
	      if (key in obj) {
	        Object.defineProperty(obj, key, {
	          value: value,
	          enumerable: true,
	          configurable: true,
	          writable: true
	        });
	      } else {
	        obj[key] = value;
	      }
	
	      return obj;
	    }
	
	    function _initDefineProp(target, property, descriptor, context) {
	      if (!descriptor) return;
	      Object.defineProperty(target, property, {
	        enumerable: descriptor.enumerable,
	        configurable: descriptor.configurable,
	        writable: descriptor.writable,
	        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	      });
	    }
	
	    function _classCallCheck(instance, Constructor) {
	      if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	      }
	    }
	
	    var _createClass = function () {
	      function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	          var descriptor = props[i];
	          descriptor.enumerable = descriptor.enumerable || false;
	          descriptor.configurable = true;
	          if ("value" in descriptor) descriptor.writable = true;
	          Object.defineProperty(target, descriptor.key, descriptor);
	        }
	      }
	
	      return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	      };
	    }();
	
	    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	      var desc = {};
	      Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	      });
	      desc.enumerable = !!desc.enumerable;
	      desc.configurable = !!desc.configurable;
	
	      if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	      }
	
	      desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	      }, desc);
	
	      if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	      }
	
	      if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	      }
	
	      return desc;
	    }
	
	    function _initializerWarningHelper(descriptor, context) {
	      throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	    }
	
	    var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
	
	    var Form = (_class = function () {
	      function Form(_ref) {
	        var _ref$fields = _ref.fields;
	        var fields = _ref$fields === undefined ? {} : _ref$fields;
	        var _ref$schema = _ref.schema;
	        var schema = _ref$schema === undefined ? false : _ref$schema;
	        var _ref$options = _ref.options;
	        var options = _ref$options === undefined ? {} : _ref$options;
	        var _ref$extend = _ref.extend;
	        var extend = _ref$extend === undefined ? null : _ref$extend;
	
	        _classCallCheck(this, Form);
	
	        this.schema = null;
	        this.options = null;
	        this.extend = null;
	        this.ajv = null;
	
	        _initDefineProp(this, 'fields', _descriptor, this);
	
	        _initDefineProp(this, 'validating', _descriptor2, this);
	
	        _initDefineProp(this, 'genericErrorMessage', _descriptor3, this);
	
	        _initDefineProp(this, 'syncValue', _descriptor4, this);
	
	        this.fields = fields;
	        this.schema = schema;
	        this.options = options;
	        this.extend = extend;
	
	        // initialize form
	        this.mergeSchemaDefaults();
	        this.initAjv();
	        this.initFields();
	        this.validateFields(false, false);
	        this.observeFields();
	      }
	
	      _createClass(Form, [{
	        key: 'mergeSchemaDefaults',
	        value: function mergeSchemaDefaults() {
	          var _this = this;
	
	          if (Object.keys(this.fields).length === 0 && !!this.schema) {
	            Object.keys(this.schema.properties).forEach(function (property) {
	              var label = _this.schema.properties[property].title;
	              var value = _this.schema.properties[property].default;
	              _this.fields[property] = { label: label, value: value }; // eslint-disable-line no-param-reassign
	            });
	          }
	        }
	      }, {
	        key: 'initFields',
	        value: function initFields() {
	          var _this2 = this;
	
	          var opt = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	          var keys = this.fieldKeys();
	          keys.forEach(function (key) {
	            return _lodash2.default.merge(_this2.fields, _defineProperty({}, key, new _form2.default(key, _this2.fields[key], opt)));
	          });
	        }
	      }, {
	        key: 'initAjv',
	        value: function initAjv() {
	          if (!this.schema) return;
	          // create ajv instance
	          var ajvInstance = new _ajv2.default(_lodash2.default.merge(this.options, {
	            allErrors: true,
	            coerceTypes: true,
	            v5: true
	          }));
	          // extend with custom keywords
	          if (this.extend) {
	            _lodash2.default.forEach(this.extend, function (val, key) {
	              return ajvInstance.addKeyword(key, val);
	            });
	          }
	          // create ajvInstance validator (compiling rules)
	          this.ajv = ajvInstance.compile(this.schema);
	        }
	      }, {
	        key: 'observeFields',
	        value: function observeFields() {
	          var _this3 = this;
	
	          _lodash2.default.forEach(this.fields, function (val, key) {
	            return (0, _mobx.observe)(_this3.fields[key], '$value', function () {
	              return _this3.validateField(key, true);
	            });
	          });
	        }
	      }, {
	        key: 'validateFields',
	        value: function validateFields() {
	          var _this4 = this;
	
	          var force = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
	          var showErrors = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	          _lodash2.default.forEach(this.fields, function (field) {
	            return field.validate(force, showErrors, _this4);
	          });
	        }
	      }, {
	        key: 'validateField',
	        value: function validateField() {
	          var key = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	          var recursive = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	          var _this5 = this;
	
	          var force = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	          var showErrors = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
	
	          if (!key) throw new Error('validateField: No field key provided');
	
	          // validate field by key
	          this.fields[key].validate(force, showErrors, this);
	
	          /*
	            validate related fields if specified
	            and recursive validation allowed
	          */
	          if (!recursive) return;
	          var related = this.fields[key].related;
	          if (!_lodash2.default.isEmpty(related)) {
	            _lodash2.default.forEach(related, function ($rel) {
	              return _this5.validateField($rel);
	            });
	          }
	        }
	      }, {
	        key: 'fieldKeys',
	        value: function fieldKeys() {
	          return Object.keys(this.fields);
	        }
	      }, {
	        key: 'values',
	        value: function values() {
	          return _lodash2.default.mapValues(this.fields, 'value');
	        }
	      }, {
	        key: 'clear',
	        value: function clear() {
	          var _this6 = this;
	
	          this.fieldKeys().forEach(function (key) {
	            return _this6.fields[key].clear();
	          });
	
	          this.genericErrorMessage = null;
	        }
	      }, {
	        key: 'reset',
	        value: function reset() {
	          var _this7 = this;
	
	          _lodash2.default.forEach(this.fields, function (val, key) {
	            return _this7.fields[key].reset();
	          });
	
	          this.genericErrorMessage = null;
	        }
	      }, {
	        key: 'update',
	        value: function update(obj) {
	          var _this8 = this;
	
	          _lodash2.default.forEach(obj, function (val, key) {
	            return _this8.fields[key].update(val);
	          });
	        }
	      }, {
	        key: 'validate',
	        value: function validate() {
	          // consider the form invalid until the validation process finish
	          if (this.validating) return false;
	
	          this.validateFields();
	
	          // Check with with "ajv" rules (exit on fail)
	          if (!this.checkGenericAjvValidation()) return false;
	
	          // return the fields validation status
	          return this.isValid;
	        }
	      }, {
	        key: 'checkGenericAjvValidation',
	        value: function checkGenericAjvValidation() {
	          this.validating = true;
	          this.genericErrorMessage = null;
	
	          if (this.ajvValidate) {
	            var validate = this.ajvValidate;
	            var formIsValid = validate(this.values());
	            if (!formIsValid) {
	              this.genericErrorMessage = 'An error occurred. Validation has failed.';
	              this.validating = false;
	              return false;
	            }
	          }
	
	          this.validating = false;
	          return true;
	        }
	      }, {
	        key: 'invalidate',
	        value: function invalidate(errors) {
	          if (_lodash2.default.isString(errors)) {
	            this.genericErrorMessage = errors;
	            return;
	          }
	          this.genericErrorMessage = 'An error occurred sending request.';
	          return;
	        }
	      }, {
	        key: 'isValid',
	        get: function get() {
	          // consider the form invalid until the validation process finish
	          if (this.validating) return false;
	
	          // check isValid
	          return _lodash2.default.every(this.fields, 'isValid');
	        }
	      }, {
	        key: 'isDirty',
	        get: function get() {
	          var _this9 = this;
	
	          return this.fieldKeys().some(function (key) {
	            return _this9.fields[key].isDirty;
	          });
	        }
	      }]);
	
	      return Form;
	    }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'fields', [_mobx.observable], {
	      enumerable: true,
	      initializer: function initializer() {
	        return {};
	      }
	    }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'validating', [_mobx.observable], {
	      enumerable: true,
	      initializer: function initializer() {
	        return false;
	      }
	    }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'genericErrorMessage', [_mobx.observable], {
	      enumerable: true,
	      initializer: function initializer() {
	        return null;
	      }
	    }), _applyDecoratedDescriptor(_class.prototype, 'mergeSchemaDefaults', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'mergeSchemaDefaults'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'initFields', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'initFields'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'initAjv', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'initAjv'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'observeFields', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'observeFields'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isValid', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isValid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDirty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDirty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clear', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'clear'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'reset', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'reset'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'update', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'update'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validate', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'validate'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checkGenericAjvValidation', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'checkGenericAjvValidation'), _class.prototype), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'syncValue', [_mobx.action], {
	      enumerable: true,
	      initializer: function initializer() {
	        var _this10 = this;
	
	        return function (e) {
	          var currentVal = _this10.fields[e.target.name].value;
	
	          // checkbox
	          if (_lodash2.default.isBoolean(currentVal) && _lodash2.default.isBoolean(e.target.checked)) {
	            _this10.fields[e.target.name].setValue(e.target.checked);
	            return;
	          }
	
	          // text
	          _this10.fields[e.target.name].setValue(e.target.value);
	          return;
	        };
	      }
	    }), _applyDecoratedDescriptor(_class.prototype, 'invalidate', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'invalidate'), _class.prototype)), _class);
	    exports.default = Form;
	    module.exports = exports['default'];
	  });
	});

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(5), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(module, exports, require('mobx'), require('lodash'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod, mod.exports, global.mobx, global.lodash);
	    global.formField = mod.exports;
	  }
	})(this, function (module, exports) {
	  (function (global, factory) {
	    if (true) {
	      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(5), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	      factory(module, exports);
	    } else {
	      var mod = {
	        exports: {}
	      };
	      factory(mod, mod.exports, global.mobx, global.lodash);
	      global.formField = mod.exports;
	    }
	  })(this, function (module, exports, _mobx, _lodash) {
	    'use strict';
	
	    Object.defineProperty(exports, "__esModule", {
	      value: true
	    });
	    exports.default = undefined;
	
	    var _lodash2 = _interopRequireDefault(_lodash);
	
	    function _interopRequireDefault(obj) {
	      return obj && obj.__esModule ? obj : {
	        default: obj
	      };
	    }
	
	    function _defineProperty(obj, key, value) {
	      if (key in obj) {
	        Object.defineProperty(obj, key, {
	          value: value,
	          enumerable: true,
	          configurable: true,
	          writable: true
	        });
	      } else {
	        obj[key] = value;
	      }
	
	      return obj;
	    }
	
	    function _initDefineProp(target, property, descriptor, context) {
	      if (!descriptor) return;
	      Object.defineProperty(target, property, {
	        enumerable: descriptor.enumerable,
	        configurable: descriptor.configurable,
	        writable: descriptor.writable,
	        value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
	      });
	    }
	
	    function _classCallCheck(instance, Constructor) {
	      if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	      }
	    }
	
	    var _createClass = function () {
	      function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	          var descriptor = props[i];
	          descriptor.enumerable = descriptor.enumerable || false;
	          descriptor.configurable = true;
	          if ("value" in descriptor) descriptor.writable = true;
	          Object.defineProperty(target, descriptor.key, descriptor);
	        }
	      }
	
	      return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	      };
	    }();
	
	    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	      var desc = {};
	      Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	      });
	      desc.enumerable = !!desc.enumerable;
	      desc.configurable = !!desc.configurable;
	
	      if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	      }
	
	      desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	      }, desc);
	
	      if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	      }
	
	      if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	      }
	
	      return desc;
	    }
	
	    function _initializerWarningHelper(descriptor, context) {
	      throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
	    }
	
	    var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
	
	    var Field = (_class = function () {
	      function Field(key) {
	        var field = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	        var opt = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	        _classCallCheck(this, Field);
	
	        _initDefineProp(this, '$value', _descriptor, this);
	
	        _initDefineProp(this, '$valid', _descriptor2, this);
	
	        _initDefineProp(this, 'interacted', _descriptor3, this);
	
	        _initDefineProp(this, 'disabled', _descriptor4, this);
	
	        _initDefineProp(this, 'errorMessage', _descriptor5, this);
	
	        this.silent = null;
	        this.originalValue = null;
	        this.originalErrorMessage = null;
	        this.validateProperty = null;
	        this.validationFunctionsValues = [];
	
	        this.initField(key, field, opt);
	      }
	
	      _createClass(Field, [{
	        key: 'initField',
	        value: function initField(key, field, opt) {
	          var _this = this;
	
	          this.key = key;
	
	          // overwrite none/some/any class properties
	          _lodash2.default.forEach(opt, function ($v, $k) {
	            _this[$k] = $v;
	          });
	
	          /**
	            Assume the field is an array, a boolean, a string or a number
	            Example:
	               {
	                username: 'test',
	                password: '12345',
	              }
	          */
	          if (_lodash2.default.isBoolean(field) || _lodash2.default.isArray(field) || _lodash2.default.isString(field) || _lodash2.default.isNumber(field)) {
	            /* The field IS the value here */
	            this.name = key;
	            this.label = key;
	            this.$value = field;
	            this.originalValue = field;
	            return;
	          }
	
	          /**
	            Assume the field is an object.
	            Example:
	               {
	                username: {
	                  value: 'test';
	                  label: 'Username',
	                  message: 'This is a message!'
	                  validate: (field, fields) => {},
	                },
	              }
	          */
	          if (_lodash2.default.isObject(field)) {
	            var value = field.value;
	            var name = field.name;
	            var label = field.label;
	            var disabled = field.disabled;
	            var message = field.message;
	            var validate = field.validate;
	            var related = field.related;
	
	            this.$value = value || '';
	            this.originalValue = value || '';
	            this.name = name || key;
	            this.label = label || key;
	            this.originalErrorMessage = message;
	            this.validateProperty = (0, _mobx.toJS)(validate) || null;
	            this.disabled = disabled || false;
	            this.related = related || [];
	            return;
	          }
	
	          throw new Error('\n      The field ' + this.key + ' should be an object\n      , an array, a boolean, a string or a number.\n    ');
	        }
	      }, {
	        key: 'getValue',
	        value: function getValue() {
	          return this.$value;
	        }
	      }, {
	        key: 'setValue',
	        value: function setValue(val) {
	          if (!this.interacted) this.interacted = true;
	          if (this.$value === val) return;
	          this.$value = val;
	        }
	      }, {
	        key: 'clear',
	        value: function clear() {
	          if (_lodash2.default.isBoolean(this.$value)) return;
	          if (_lodash2.default.isString(this.$value)) this.$value = '';
	          this.interacted = false;
	          this.setInvalid(false);
	          this.silent = true;
	        }
	      }, {
	        key: 'reset',
	        value: function reset() {
	          if (!_lodash2.default.isBoolean(this.$value)) this.$value = this.originalValue;
	          this.interacted = false;
	          this.setInvalid(false);
	        }
	      }, {
	        key: 'update',
	        value: function update(obj) {
	          this.setValue(obj);
	        }
	      }, {
	        key: 'setValid',
	        value: function setValid() {
	          this.$valid = true;
	          this.errorMessage = null;
	        }
	      }, {
	        key: 'setInvalid',
	        value: function setInvalid() {
	          var showErrors = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
	
	          if (!_lodash2.default.isBoolean(this.$value)) this.$valid = false;
	          this.errorMessage = showErrors ? this.originalErrorMessage : null;
	        }
	      }, {
	        key: 'setInvalidWithMessage',
	        value: function setInvalidWithMessage(message) {
	          var showErrors = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	          this.$valid = false;
	          this.errorMessage = showErrors ? message : null;
	        }
	      }, {
	        key: 'validate',
	        value: function validate() {
	          var force = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	          var showErrors = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	          var form = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	          if (form) this.form = form;
	
	          // exit on silent mode (on reset and clear)
	          if (this.silent === true) {
	            this.silent = false;
	            return;
	          }
	
	          // not execute if no valid function or ajv rules
	          if (!this.validateProperty && !this.form.ajv) {
	            this.setValid();
	            return;
	          }
	
	          // Use "ajv" Rules
	          if (this.form.ajv) this.handleAjvValidationRules(showErrors);
	
	          // Use "validate" Function
	          if (this.validateProperty) this.handleValidateProperty(showErrors);
	        }
	      }, {
	        key: 'handleAjvValidationRules',
	        value: function handleAjvValidationRules(showErrors) {
	          var _this2 = this;
	
	          var validate = this.form.ajv;
	          var formIsValid = validate(_defineProperty({}, this.name, this.$value));
	
	          if (!formIsValid) {
	            // find current field error message from ajv errors
	            var fieldErrorObj = _lodash2.default.find(validate.errors, function (item) {
	              return _lodash2.default.includes(item.dataPath, '.' + _this2.name);
	            });
	
	            // if fieldErrorObj is not undefined, the current field is invalid.
	            if (!_lodash2.default.isUndefined(fieldErrorObj)) {
	              // the current field is now invalid
	              // add additional info to the message
	              var message = this.label + ' ' + fieldErrorObj.message;
	              // invalidate the current field with message
	              this.setInvalidWithMessage(message, showErrors);
	              return;
	            }
	          }
	
	          this.setValid();
	          return;
	        }
	      }, {
	        key: 'handleValidateProperty',
	        value: function handleValidateProperty(showErrors) {
	          var _this3 = this;
	
	          // reset this.handleValidateFunction;
	          this.validationFunctionsValues = [];
	          // get validators from validate property
	          var $validator = (0, _mobx.toJS)(this.validateProperty);
	
	          // check if is a validator function
	          if (_lodash2.default.isFunction($validator)) {
	            var res = this.handleValidateFunction($validator, showErrors);
	            this.validationFunctionsValues.push({ valid: res[0], message: res[1] });
	          }
	
	          // check if is an array of validator functions
	          if (_lodash2.default.isArray($validator)) {
	            // loop validation functions
	            _lodash2.default.forEach($validator, function ($fn) {
	              if (_lodash2.default.isFunction($fn)) {
	                var _res = _this3.handleValidateFunction($fn);
	                _this3.validationFunctionsValues.push({ valid: _res[0], message: _res[1] });
	              }
	            });
	          }
	
	          var isValid = this.checkValidateFunctions();
	
	          if (isValid && this.$valid) {
	            // if all the rules are valid, mark the field as valid
	            this.setValid();
	            return;
	          }
	
	          if (!isValid) {
	            // otherwise loop until find an error message to show
	            _lodash2.default.forEach(this.validationFunctionsValues, function (rule) {
	              if (rule.valid === false) {
	                _this3.setInvalidWithMessage(rule.message, showErrors);
	                return;
	              }
	            });
	          }
	        }
	      }, {
	        key: 'handleValidateFunction',
	        value: function handleValidateFunction($validator) {
	          var res = $validator(this, this.form.fields);
	
	          /**
	            Handle "array"
	          */
	          if (_lodash2.default.isArray(res)) {
	            var isValid = res[0] || false;
	            var message = res[1] || 'Error';
	            return [isValid, message];
	          }
	
	          /**
	            Handle "boolean"
	          */
	          if (_lodash2.default.isBoolean(res)) {
	            return [res, 'Error'];
	          }
	
	          return [false, 'Error'];
	        }
	      }, {
	        key: 'checkValidateFunctions',
	        value: function checkValidateFunctions() {
	          return _lodash2.default.every(this.validationFunctionsValues, 'valid');
	        }
	      }, {
	        key: 'isValid',
	        get: function get() {
	          return this.$valid;
	        }
	      }, {
	        key: 'isDirty',
	        get: function get() {
	          var valueChanged = this.originalValue !== this.$value;
	          return valueChanged || this.interacted;
	        }
	      }, {
	        key: 'value',
	        get: function get() {
	          if ((0, _mobx.isObservableArray)(this.$value)) {
	            return [].slice.call(this.$value);
	          }
	          return this.$value;
	        }
	      }]);
	
	      return Field;
	    }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, '$value', [_mobx.observable], {
	      enumerable: true,
	      initializer: null
	    }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, '$valid', [_mobx.observable], {
	      enumerable: true,
	      initializer: function initializer() {
	        return false;
	      }
	    }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'interacted', [_mobx.observable], {
	      enumerable: true,
	      initializer: function initializer() {
	        return false;
	      }
	    }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'disabled', [_mobx.observable], {
	      enumerable: true,
	      initializer: function initializer() {
	        return false;
	      }
	    }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'errorMessage', [_mobx.observable], {
	      enumerable: true,
	      initializer: function initializer() {
	        return null;
	      }
	    }), _applyDecoratedDescriptor(_class.prototype, 'initField', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'initField'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isValid', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isValid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDirty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDirty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'value', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'value'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setValue', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'setValue'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clear', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'clear'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'reset', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'reset'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'update', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'update'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setValid', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'setValid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setInvalid', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'setInvalid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setInvalidWithMessage', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'setInvalidWithMessage'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validate', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'validate'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleAjvValidationRules', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'handleAjvValidationRules'), _class.prototype)), _class);
	    exports.default = Field;
	    module.exports = exports['default'];
	  });
	});

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=index.umd.js.map