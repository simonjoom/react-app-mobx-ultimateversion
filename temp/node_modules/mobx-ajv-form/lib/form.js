(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'mobx', './form.field', 'ajv', 'lodash'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('mobx'), require('./form.field'), require('ajv'), require('lodash'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.mobx, global.form, global.ajv, global.lodash);
    global.form = mod.exports;
  }
})(this, function (module, exports, _mobx, _form, _ajv, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _form2 = _interopRequireDefault(_form);

  var _ajv2 = _interopRequireDefault(_ajv);

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  var Form = (_class = function () {
    function Form(_ref) {
      var _ref$fields = _ref.fields;
      var fields = _ref$fields === undefined ? {} : _ref$fields;
      var _ref$schema = _ref.schema;
      var schema = _ref$schema === undefined ? false : _ref$schema;
      var _ref$options = _ref.options;
      var options = _ref$options === undefined ? {} : _ref$options;
      var _ref$extend = _ref.extend;
      var extend = _ref$extend === undefined ? null : _ref$extend;

      _classCallCheck(this, Form);

      this.schema = null;
      this.options = null;
      this.extend = null;
      this.ajv = null;

      _initDefineProp(this, 'fields', _descriptor, this);

      _initDefineProp(this, 'validating', _descriptor2, this);

      _initDefineProp(this, 'genericErrorMessage', _descriptor3, this);

      _initDefineProp(this, 'syncValue', _descriptor4, this);

      this.fields = fields;
      this.schema = schema;
      this.options = options;
      this.extend = extend;

      // initialize form
      this.mergeSchemaDefaults();
      this.initAjv();
      this.initFields();
      this.validateFields(false, false);
      this.observeFields();
    }

    _createClass(Form, [{
      key: 'mergeSchemaDefaults',
      value: function mergeSchemaDefaults() {
        var _this = this;

        if (Object.keys(this.fields).length === 0 && !!this.schema) {
          Object.keys(this.schema.properties).forEach(function (property) {
            var label = _this.schema.properties[property].title;
            var value = _this.schema.properties[property].default;
            _this.fields[property] = { label: label, value: value }; // eslint-disable-line no-param-reassign
          });
        }
      }
    }, {
      key: 'initFields',
      value: function initFields() {
        var _this2 = this;

        var opt = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        var keys = this.fieldKeys();
        keys.forEach(function (key) {
          return _lodash2.default.merge(_this2.fields, _defineProperty({}, key, new _form2.default(key, _this2.fields[key], opt)));
        });
      }
    }, {
      key: 'initAjv',
      value: function initAjv() {
        if (!this.schema) return;
        // create ajv instance
        var ajvInstance = new _ajv2.default(_lodash2.default.merge(this.options, {
          allErrors: true,
          coerceTypes: true,
          v5: true
        }));
        // extend with custom keywords
        if (this.extend) {
          _lodash2.default.forEach(this.extend, function (val, key) {
            return ajvInstance.addKeyword(key, val);
          });
        }
        // create ajvInstance validator (compiling rules)
        this.ajv = ajvInstance.compile(this.schema);
      }
    }, {
      key: 'observeFields',
      value: function observeFields() {
        var _this3 = this;

        _lodash2.default.forEach(this.fields, function (val, key) {
          return (0, _mobx.observe)(_this3.fields[key], '$value', function () {
            return _this3.validateField(key, true);
          });
        });
      }
    }, {
      key: 'validateFields',
      value: function validateFields() {
        var _this4 = this;

        var force = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
        var showErrors = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

        _lodash2.default.forEach(this.fields, function (field) {
          return field.validate(force, showErrors, _this4);
        });
      }
    }, {
      key: 'validateField',
      value: function validateField() {
        var key = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
        var recursive = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

        var _this5 = this;

        var force = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
        var showErrors = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];

        if (!key) throw new Error('validateField: No field key provided');

        // validate field by key
        this.fields[key].validate(force, showErrors, this);

        /*
          validate related fields if specified
          and recursive validation allowed
        */
        if (!recursive) return;
        var related = this.fields[key].related;
        if (!_lodash2.default.isEmpty(related)) {
          _lodash2.default.forEach(related, function ($rel) {
            return _this5.validateField($rel);
          });
        }
      }
    }, {
      key: 'fieldKeys',
      value: function fieldKeys() {
        return Object.keys(this.fields);
      }
    }, {
      key: 'values',
      value: function values() {
        return _lodash2.default.mapValues(this.fields, 'value');
      }
    }, {
      key: 'clear',
      value: function clear() {
        var _this6 = this;

        this.fieldKeys().forEach(function (key) {
          return _this6.fields[key].clear();
        });

        this.genericErrorMessage = null;
      }
    }, {
      key: 'reset',
      value: function reset() {
        var _this7 = this;

        _lodash2.default.forEach(this.fields, function (val, key) {
          return _this7.fields[key].reset();
        });

        this.genericErrorMessage = null;
      }
    }, {
      key: 'update',
      value: function update(obj) {
        var _this8 = this;

        _lodash2.default.forEach(obj, function (val, key) {
          return _this8.fields[key].update(val);
        });
      }
    }, {
      key: 'validate',
      value: function validate() {
        // consider the form invalid until the validation process finish
        if (this.validating) return false;

        this.validateFields();

        // Check with with "ajv" rules (exit on fail)
        if (!this.checkGenericAjvValidation()) return false;

        // return the fields validation status
        return this.isValid;
      }
    }, {
      key: 'checkGenericAjvValidation',
      value: function checkGenericAjvValidation() {
        this.validating = true;
        this.genericErrorMessage = null;

        if (this.ajvValidate) {
          var validate = this.ajvValidate;
          var formIsValid = validate(this.values());
          if (!formIsValid) {
            this.genericErrorMessage = 'An error occurred. Validation has failed.';
            this.validating = false;
            return false;
          }
        }

        this.validating = false;
        return true;
      }
    }, {
      key: 'invalidate',
      value: function invalidate(errors) {
        if (_lodash2.default.isString(errors)) {
          this.genericErrorMessage = errors;
          return;
        }
        this.genericErrorMessage = 'An error occurred sending request.';
        return;
      }
    }, {
      key: 'isValid',
      get: function get() {
        // consider the form invalid until the validation process finish
        if (this.validating) return false;

        // check isValid
        return _lodash2.default.every(this.fields, 'isValid');
      }
    }, {
      key: 'isDirty',
      get: function get() {
        var _this9 = this;

        return this.fieldKeys().some(function (key) {
          return _this9.fields[key].isDirty;
        });
      }
    }]);

    return Form;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'fields', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
      return {};
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'validating', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'genericErrorMessage', [_mobx.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class.prototype, 'mergeSchemaDefaults', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'mergeSchemaDefaults'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'initFields', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'initFields'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'initAjv', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'initAjv'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'observeFields', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'observeFields'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isValid', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isValid'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'isDirty', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'isDirty'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clear', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'clear'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'reset', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'reset'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'update', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'update'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'validate', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'validate'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'checkGenericAjvValidation', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'checkGenericAjvValidation'), _class.prototype), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'syncValue', [_mobx.action], {
    enumerable: true,
    initializer: function initializer() {
      var _this10 = this;

      return function (e) {
        var currentVal = _this10.fields[e.target.name].value;

        // checkbox
        if (_lodash2.default.isBoolean(currentVal) && _lodash2.default.isBoolean(e.target.checked)) {
          _this10.fields[e.target.name].setValue(e.target.checked);
          return;
        }

        // text
        _this10.fields[e.target.name].setValue(e.target.value);
        return;
      };
    }
  }), _applyDecoratedDescriptor(_class.prototype, 'invalidate', [_mobx.action], Object.getOwnPropertyDescriptor(_class.prototype, 'invalidate'), _class.prototype)), _class);
  exports.default = Form;
  module.exports = exports['default'];
});