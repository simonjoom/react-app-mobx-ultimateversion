'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _feathersCommons = require('feathers-commons');

var _bundled = require('./bundled');

var hooks = _interopRequireWildcard(_bundled);

var _commons = require('./commons');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function isPromise(result) {
  return typeof result !== 'undefined' && typeof result.then === 'function';
}

function hookMixin(service) {
  if (typeof service.mixin !== 'function') {
    return;
  }

  var app = this;
  var methods = app.methods;
  var oldBefore = service.before;
  var oldAfter = service.after;
  var mixin = {};

  (0, _commons.addHookMethod)(service, 'before', methods);
  (0, _commons.addHookMethod)(service, 'after', methods);

  methods.forEach(function (method) {
    if (typeof service[method] !== 'function') {
      return;
    }

    mixin[method] = function () {
      // A reference to the original method
      var _super = this._super.bind(this);
      // Create the hook object that gets passed through
      var hookObject = _feathersCommons.hooks.hookObject(method, 'before', arguments);

      hookObject.app = app;

      // Process all before hooks
      return _commons.processHooks.call(this, this.__beforeHooks[method], hookObject)
      // Use the hook object to call the original method
      .then(function (hookObject) {
        if (typeof hookObject.result !== 'undefined') {
          return Promise.resolve(hookObject);
        }

        return new Promise(function (resolve, reject) {
          var args = _feathersCommons.hooks.makeArguments(hookObject);
          // The method may not be normalized yet so we have to handle both
          // ways, either by callback or by Promise
          var callback = function callback(error, result) {
            if (error) {
              reject(error);
            } else {
              hookObject.result = result;
              resolve(hookObject);
            }
          };

          // We replace the callback with resolving the promise
          args.splice(args.length - 1, 1, callback);

          var result = _super.apply(undefined, _toConsumableArray(args));

          if (isPromise(result)) {
            result.then(function (data) {
              return callback(null, data);
            }, callback);
          }
        });
      })
      // Make a copy of hookObject from `before` hooks and update type
      .then(function (hookObject) {
        return Object.assign({}, hookObject, { type: 'after' });
      })
      // Run through all `after` hooks
      .then(_commons.processHooks.bind(this, this.__afterHooks[method]))
      // Finally, return the result
      .then(function (hookObject) {
        return hookObject.result;
      });
    };
  });

  service.mixin(mixin);

  // Before hooks that were registered in the service
  if (oldBefore) {
    service.before(oldBefore);
  }

  // After hooks that were registered in the service
  if (oldAfter) {
    service.after(oldAfter);
  }
}

function configure() {
  return function () {
    this.mixins.unshift(hookMixin);
  };
}

configure.removeQuery = hooks.removeQuery;
configure.pluckQuery = hooks.pluckQuery;
configure.lowerCase = hooks.lowerCase;
configure.remove = hooks.remove;
configure.pluck = hooks.pluck;
configure.disable = hooks.disable;
configure.populate = hooks.populate;

exports.default = configure;
module.exports = exports['default'];