'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.isHookObject = isHookObject;
exports.processHooks = processHooks;
exports.addHookMethod = addHookMethod;

var _feathersCommons = require('feathers-commons');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isHookObject(hookObject) {
  return (typeof hookObject === 'undefined' ? 'undefined' : _typeof(hookObject)) === 'object' && typeof hookObject.method === 'string' && (hookObject.type === 'before' || hookObject.type === 'after');
}

function processHooks(hooks, initialHookObject) {
  var _this = this;

  var hookObject = initialHookObject;
  var updateCurrentHook = function updateCurrentHook(current) {
    if (current) {
      if (!isHookObject(current)) {
        throw new Error(hookObject.type + ' hook for \'' + hookObject.method + '\' method returned invalid hook object');
      }

      hookObject = current;
    }

    return hookObject;
  };
  var promise = Promise.resolve(hookObject);

  // Go through all hooks and chain them into our promise
  hooks.forEach(function (fn) {
    var hook = fn.bind(_this);

    if (hook.length === 2) {
      // function(hook, next)
      promise = promise.then(function (hookObject) {
        return new Promise(function (resolve, reject) {
          hook(hookObject, function (error, result) {
            return error ? reject(error) : resolve(result);
          });
        });
      });
    } else {
      // function(hook)
      promise = promise.then(hook);
    }

    // Use the returned hook object or the old one
    promise = promise.then(updateCurrentHook);
  });

  return promise.catch(function (error) {
    // Add the hook information to any errors
    error.hook = hookObject;
    throw error;
  });
}

function addHookMethod(service, type, methods) {
  var prop = '__' + type + 'Hooks';

  // Initialize properties where hook functions are stored
  service[prop] = {};
  methods.forEach(function (method) {
    if (typeof service[method] === 'function') {
      service[prop][method] = [];
    }
  });

  // mixin the method (.before or .after)
  service.mixin(_defineProperty({}, type, function (obj) {
    var _this2 = this;

    var hooks = _feathersCommons.hooks.convertHookData(obj);

    methods.forEach(function (method) {
      if (typeof _this2[method] !== 'function') {
        return;
      }

      var myHooks = _this2[prop][method];

      if (hooks.all) {
        myHooks.push.apply(myHooks, hooks.all);
      }

      if (hooks[method]) {
        myHooks.push.apply(myHooks, hooks[method]);
      }
    });

    return this;
  }));
}